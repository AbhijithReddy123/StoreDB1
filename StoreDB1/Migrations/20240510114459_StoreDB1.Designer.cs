// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreDB1.Models;

#nullable disable

namespace StoreDB1.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    [Migration("20240510114459_StoreDB1")]
    partial class StoreDB1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StoreDB1.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CustomerId")
                        .HasName("PK_dbo.Customer");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("StoreDB1.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("ProductId")
                        .HasName("PK_dbo.ProductId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("StoreDB1.Models.Sales", b =>
                {
                    b.Property<int>("SalesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerId");

                    b.Property<DateTime>("DateSold")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("StoreId");

                    b.HasKey("SalesId")
                        .HasName("PK_dbo.Sales");

                    b.HasIndex(new[] { "CustomerId" }, "IX_CustomerId");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductId");

                    b.HasIndex(new[] { "StoreId" }, "IX_StoreId");

                    b.ToTable("Sales", (string)null);
                });

            modelBuilder.Entity("StoreDB1.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("StoreId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("StoreId")
                        .HasName("PK_dbo.StoreId");

                    b.ToTable("Store", (string)null);
                });

            modelBuilder.Entity("StoreDB1.Models.Sales", b =>
                {
                    b.HasOne("StoreDB1.Models.Customer", "customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Sales_dbo.Customer_CustomerId");

                    b.HasOne("StoreDB1.Models.Product", "Product")
                        .WithMany("Sales")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Sales_dbo.Product_ProductId");

                    b.HasOne("StoreDB1.Models.Store", "Store")
                        .WithMany("Sales")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Sales_dbo.Store_StoreId");

                    b.Navigation("Product");

                    b.Navigation("Store");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("StoreDB1.Models.Customer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("StoreDB1.Models.Product", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("StoreDB1.Models.Store", b =>
                {
                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
